{"version":3,"sources":["SortingAlgo/SortingAlgorithm.jsx","SortingVisualizer/SortingVisualizer.jsx","SortingAlgo/BubbleSort.jsx","App.js","index.js"],"names":["getMergeSortAnimation","array","animation","length","auxiArray","slice","MergeSortHelper","mainArray","start","end","mid","Math","floor","i","k","j","push","doMerge","SortingVisualizer","props","mergeSort","animations","state","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","console","log","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","this","resetArray","min","max","random","setState","n","tmp","BubbleSort","getBubbleSortAnimation","className","map","value","index","key","onClick","QuickSort","React","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f690bcf1.chunk.js","sourcesContent":["export function getMergeSortAnimation (array) {\r\n    const animation = []\r\n    if(array.length <= 1) return array\r\n    const auxiArray = array.slice();\r\n    MergeSortHelper(array,0,array.length-1,auxiArray,animation)\r\n    return animation\r\n}\r\n\r\nfunction MergeSortHelper(mainArray,start,end,auxiArray,animation,) {\r\n\r\n    if(start === end) return\r\n    const mid = Math.floor((start+end)/2)\r\n    MergeSortHelper(auxiArray,start,mid,mainArray,animation)\r\n    MergeSortHelper(auxiArray,mid+1,end,mainArray,animation)\r\n\r\n    doMerge(mainArray,start,mid,end,auxiArray,animation)\r\n}\r\n\r\nfunction doMerge(mainArray,start,mid,end,auxiArray,animation){\r\n    let i = start\r\n    let k = start\r\n    let j = mid+1\r\n\r\n    while(i<=mid && j<=end){\r\n        animation.push([i,j]) // to change color\r\n        animation.push([i,j]) // to revert color\r\n        if(auxiArray[i] <= auxiArray[j]){\r\n            animation.push([k,auxiArray[i]])\r\n            mainArray[k++] = auxiArray[i++]\r\n        }\r\n        else{\r\n            animation.push([k,auxiArray[i]])\r\n            mainArray[k++] = auxiArray[j++]\r\n        }\r\n    }\r\n    while(i<=mid){\r\n        animation.push([i,i])\r\n        animation.push([i,i])\r\n        animation.push([k,auxiArray[i]])\r\n        mainArray[k++] = auxiArray[i++]\r\n    }\r\n    while(j<=end){\r\n        animation.push([j,j])\r\n        animation.push([j,j])\r\n        animation.push([k,auxiArray[i]])\r\n        mainArray[k++] = auxiArray[j++]\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Sorting.css'\r\nimport {getMergeSortAnimation} from '../SortingAlgo/SortingAlgorithm'\r\nimport {getBubbleSortAnimation} from '../SortingAlgo/BubbleSort'\r\n\r\nconst SECONDARY_COLOR = 'red'\r\nconst PRIMARY_COLOR = 'blue'\r\nconst ANIMATION_SPEED_MS = 1\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            array:[],\r\n        }\r\n    }\r\n    componentDidMount(){ // this func will run when we reload our page\r\n        this.resetArray()\r\n    }\r\n\r\n    resetArray(){\r\n        const array = []    \r\n        for(let i=0 ; i<330 ; i++){\r\n            array.push(randomGenerator(5,600))\r\n        }\r\n        this.setState({array})\r\n    }\r\n    \r\n    mergeSort = () => {\r\n    const animations = getMergeSortAnimation(this.state.array);\r\n     for (let i = 0; i < animations.length; ++i) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n        // const isColorChange = 1\r\n      if (isColorChange) {\r\n        const [barOneIdx,barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        // console.log(barOneStyle);\r\n        console.log(barTwoIdx);\r\n        console.log(barOneIdx);\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n       }\r\n     else {\r\n        setTimeout(() => {\r\n          const [barOneIdx,newHeight] = animations[i];\r\n          const barOneStylee = arrayBars[barOneIdx].style;\r\n          barOneStylee.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n}\r\n    BubbleSort(){\r\n      const animations = getBubbleSortAnimation(this.state.array)\r\n      for (let i = 0; i < animations.length; ++i) {\r\n        \r\n    }\r\n  }\r\n    render(){\r\n        const {array} = this.state\r\n\r\n        return (\r\n           <>\r\n           <div className=\"array-container\">\r\n            {array.map((value,index)=>(\r\n                <div className=\"array-bar\" key = {index}\r\n                style = {{backgroundColor : PRIMARY_COLOR,\r\n                height : `${value}px`,}}\r\n               >\r\n                </div>\r\n        ))}\r\n        <button className=\"btn\" onClick={()=>this.resetArray()}>Generate New Array</button>\r\n        <button className=\"btn\" onClick={()=>this.mergeSort()}>Merge Sort</button>\r\n        <button className=\"btn\" onClick={()=>this.QuickSort()}>Quick Sort</button>\r\n        <button className=\"btn\" onClick={()=>this.BubbleSort()}>Bubble Sort</button>\r\n        </div>\r\n           </>\r\n        )\r\n    }\r\n}\r\nfunction randomGenerator(min,max){\r\n    return Math.floor(Math.random() * (max-min+1)+min)\r\n}","export function getBubbleSortAnimation (array) {\r\n    if(array.length <= 1) return array\r\n    const animation = []\r\n    BubbleSort(array,array.length,animation)\r\n    return animation\r\n}\r\n\r\nfunction BubbleSort(array,n,animation){\r\n    for(let i=0 ; i<n-1;i++){\r\n        for(let j=0;j<n-1-i;j++){\r\n            animation.push([j,j+1]) // to change color\r\n            animation.push([j,j+1]) // to revert color\r\n            if (array[j] > array[j+1])  \r\n            {\r\n                animation.push([j,j+1])\r\n                let tmp = array[j];\r\n                array[j] = array[j+1]\r\n                array[j+1] = tmp\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <App></App>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}